import * as fs from 'fs';
import * as path from 'path';
import { execSync } from 'child_process';
import * as os from 'os';

// Cores para output (compat√≠vel com Windows e Unix)
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

// Fun√ß√£o para output colorido
const log = {
  info: (msg: string) => console.log(`${colors.blue}${msg}${colors.reset}`),
  success: (msg: string) => console.log(`${colors.green}${msg}${colors.reset}`),
  warning: (msg: string) => console.log(`${colors.yellow}${msg}${colors.reset}`),
  error: (msg: string) => console.log(`${colors.red}${msg}${colors.reset}`)
};

// Configura√ß√µes
const REPO_URL = 'https://github.com/crashkill/hitss-config.git';
const TEMP_DIR = path.join(os.tmpdir(), 'hitss-config-setup');
const ENV_FILE = '.env';

// Fun√ß√£o para executar comandos cross-platform
const execCommand = (command: string, options: any = {}): string => {
  try {
    return execSync(command, { encoding: 'utf8', ...options });
  } catch (error: any) {
    throw new Error(`Comando falhou: ${command}\n${error.message}`);
  }
};

// Fun√ß√£o para verificar se arquivo existe
const fileExists = (filePath: string): boolean => {
  return fs.existsSync(filePath);
};

// Fun√ß√£o para criar diret√≥rio recursivamente
const ensureDir = (dirPath: string): void => {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
};

// Fun√ß√£o para limpar diret√≥rio
const cleanDir = (dirPath: string): void => {
  if (fs.existsSync(dirPath)) {
    fs.rmSync(dirPath, { recursive: true, force: true });
  }
};

// Fun√ß√£o para obter data formatada
const getFormattedDate = (): string => {
  const now = new Date();
  return now.toISOString().replace(/[:.]/g, '-').split('T').join(' ').split('.')[0];
};

// Fun√ß√£o principal
async function setupEnv(): Promise<void> {
  log.info('üîß HITSS - Setup de Configura√ß√µes');
  log.info('===================================');

  // Verificar se .env j√° existe
  if (fileExists(ENV_FILE)) {
    log.warning(`‚ö†Ô∏è Arquivo ${ENV_FILE} j√° existe!`);
    
    // No Node.js, usamos readline para input cross-platform
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    const askQuestion = (question: string): Promise<string> => {
      return new Promise((resolve) => {
        rl.question(question, (answer) => {
          resolve(answer);
        });
      });
    };

    try {
      const overwrite = await askQuestion('Deseja sobrescrever? (s/N): ');
      rl.close();
      
      if (overwrite.toLowerCase() !== 's' && overwrite.toLowerCase() !== 'sim') {
        log.info('Opera√ß√£o cancelada pelo usu√°rio.');
        return;
      }

      // Fazer backup do .env atual
      const backupPath = `.env.backup.${Date.now()}`;
      fs.copyFileSync(ENV_FILE, backupPath);
      log.info(`üìÑ Backup criado: ${backupPath}`);
      
    } catch (error) {
      rl.close();
      log.error('‚ùå Erro ao ler entrada do usu√°rio');
      process.exit(1);
    }
  }

  // Limpar diret√≥rio tempor√°rio
  cleanDir(TEMP_DIR);

  // Clonar reposit√≥rio de configura√ß√µes
  log.info('üì• Baixando configura√ß√µes do reposit√≥rio seguro...');
  try {
    execCommand(`git clone ${REPO_URL} "${TEMP_DIR}"`, { stdio: 'pipe' });
  } catch (error) {
    log.error('‚ùå Erro ao clonar reposit√≥rio. Verifique suas credenciais do GitHub.');
    process.exit(1);
  }

  // Verificar se o arquivo .env existe no reposit√≥rio
  const remoteEnvPath = path.join(TEMP_DIR, 'configs', 'env', '.env');
  if (!fileExists(remoteEnvPath)) {
    log.error('‚ùå Arquivo .env n√£o encontrado no reposit√≥rio remoto!');
    cleanDir(TEMP_DIR);
    process.exit(1);
  }

  // Copiar .env do reposit√≥rio
  log.info('üìÑ Copiando configura√ß√µes...');
  fs.copyFileSync(remoteEnvPath, ENV_FILE);

  // Verificar integridade do arquivo
  const envContent = fs.readFileSync(ENV_FILE, 'utf8');
  const lines = envContent.split('\n').filter(line => line.trim() && !line.startsWith('#'));
  
  log.success(`‚úÖ Arquivo ${ENV_FILE} configurado com ${lines.length} vari√°veis!`);

  // Verificar se h√° relat√≥rios de seguran√ßa dispon√≠veis
  const securityReportPath = path.join(TEMP_DIR, 'configs', 'security', 'sensitive-data-report.md');
  if (fileExists(securityReportPath)) {
    log.info('üìã Relat√≥rio de seguran√ßa dispon√≠vel:');
    
    const reportContent = fs.readFileSync(securityReportPath, 'utf8');
    const criticalSection = reportContent.match(/### üî• CR√çTICO[\s\S]*?### üìù M√âDIO/);
    
    if (criticalSection) {
      console.log('\n' + colors.red + 'üî• ARQUIVOS CR√çTICOS IDENTIFICADOS:' + colors.reset);
      const criticalLines = criticalSection[0].split('\n').slice(1, -1);
      criticalLines.forEach(line => {
        if (line.trim() && !line.includes('###')) {
          console.log(colors.yellow + line + colors.reset);
        }
      });
    }
  }

  // Verificar configura√ß√µes principais
  log.info('üîç Verificando configura√ß√µes principais...');
  
  const requiredVars = [
    'VITE_SUPABASE_URL',
    'VITE_SUPABASE_ANON_KEY',
    'AZURE_CLIENT_ID',
    'AZURE_CLIENT_SECRET',
    'AZURE_TENANT_ID'
  ];

  let missingVars: string[] = [];
  
  requiredVars.forEach(varName => {
    if (!envContent.includes(varName)) {
      missingVars.push(varName);
    }
  });

  if (missingVars.length > 0) {
    log.warning('‚ö†Ô∏è Vari√°veis em falta:');
    missingVars.forEach(varName => {
      console.log(`  - ${varName}`);
    });
  } else {
    log.success('‚úÖ Todas as vari√°veis principais est√£o configuradas!');
  }

  // Criar ou atualizar .gitignore
  log.info('üö´ Atualizando .gitignore...');
  const gitignorePath = '.gitignore';
  const gitignoreAdditions = [
    '',
    '# Configura√ß√µes sens√≠veis',
    '.env',
    '.env.local',
    '.env.*.local',
    '.env.backup.*',
    '',
    '# Arquivos de seguran√ßa',
    'configs/',
    'sensitive-data-report.md',
    '',
    '# MCP Configuration (pode conter credenciais)',
    '~/.cursor/mcp.json',
    'mcp.json',
    '',
    '# Backups tempor√°rios',
    'backups/',
    '*.backup.*'
  ];

  let gitignoreContent = '';
  if (fileExists(gitignorePath)) {
    gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
  }

  // Adicionar entradas se n√£o existirem
  const entriesToAdd = gitignoreAdditions.filter(entry => 
    entry === '' || !gitignoreContent.includes(entry)
  );

  if (entriesToAdd.length > 0) {
    fs.appendFileSync(gitignorePath, '\n' + entriesToAdd.join('\n'));
    log.success('‚úÖ .gitignore atualizado com entradas de seguran√ßa!');
  }

  // Limpeza
  cleanDir(TEMP_DIR);

  // Relat√≥rio final
  console.log('');
  log.success('üéâ Setup conclu√≠do com sucesso!');
  console.log('');
  log.info('üìä Resumo:');
  console.log(`- ‚úÖ ${lines.length} vari√°veis de ambiente configuradas`);
  console.log(`- ‚úÖ Arquivo ${ENV_FILE} criado/atualizado`);
  console.log('- ‚úÖ .gitignore atualizado com entradas de seguran√ßa');
  console.log(`- ‚úÖ Sistema: ${process.platform} ${process.arch}`);
  
  if (missingVars.length > 0) {
    console.log(`- ‚ö†Ô∏è ${missingVars.length} vari√°veis podem precisar de aten√ß√£o`);
  }

  console.log('');
  log.info('üöÄ Pr√≥ximos passos:');
  console.log('1. Verificar configura√ß√µes: cat .env (Unix) ou type .env (Windows)');
  console.log('2. Testar aplica√ß√£o: npm run dev');
  console.log('3. Verificar seguran√ßa: npm run security:verify');
  
  if (fileExists(path.join(TEMP_DIR, 'configs', 'security', 'sensitive-data-report.md'))) {
    console.log('4. Revisar relat√≥rio de seguran√ßa no reposit√≥rio');
  }

  console.log('');
  log.warning('‚ö†Ô∏è IMPORTANTE:');
  console.log('- N√£o commitar o arquivo .env');
  console.log('- Verificar se h√° credenciais hardcoded no c√≥digo');
  console.log('- Manter o backup em local seguro');
  console.log('- Revogar credenciais antigas se necess√°rio');
  
  console.log('');
  log.info('üõ†Ô∏è Comandos √∫teis (cross-platform):');
  console.log('- Backup: npm run env:backup');
  console.log('- Upload: npm run env:upload');
  console.log('- Limpeza: npm run security:clean');
  console.log('- Verifica√ß√£o: npm run security:verify');
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  setupEnv().catch(error => {
    console.error('‚ùå Erro durante o setup:', error);
    process.exit(1);
  });
} 