import * as fs from 'fs';
import * as path from 'path';
import { execSync } from 'child_process';
import * as os from 'os';

// Cores para output (compat√≠vel com Windows e Unix)
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

// Fun√ß√£o para output colorido
const log = {
  info: (msg: string) => console.log(`${colors.blue}${msg}${colors.reset}`),
  success: (msg: string) => console.log(`${colors.green}${msg}${colors.reset}`),
  warning: (msg: string) => console.log(`${colors.yellow}${msg}${colors.reset}`),
  error: (msg: string) => console.log(`${colors.red}${msg}${colors.reset}`)
};

// Configura√ß√µes
const REPO_URL = 'https://github.com/crashkill/hitss-config.git';
const TEMP_DIR = path.join(os.tmpdir(), 'hitss-config-upload');
const ENV_FILE = '.env';

// Fun√ß√£o para executar comandos cross-platform
const execCommand = (command: string, options: any = {}): string => {
  try {
    return execSync(command, { encoding: 'utf8', ...options });
  } catch (error: any) {
    throw new Error(`Comando falhou: ${command}\n${error.message}`);
  }
};

// Fun√ß√£o para verificar se arquivo existe
const fileExists = (filePath: string): boolean => {
  return fs.existsSync(filePath);
};

// Fun√ß√£o para criar diret√≥rio recursivamente
const ensureDir = (dirPath: string): void => {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
};

// Fun√ß√£o para limpar diret√≥rio
const cleanDir = (dirPath: string): void => {
  if (fs.existsSync(dirPath)) {
    fs.rmSync(dirPath, { recursive: true, force: true });
  }
};

// Fun√ß√£o para obter data formatada
const getFormattedDate = (): string => {
  const now = new Date();
  return now.toISOString().replace(/[:.]/g, '-').split('T').join(' ').split('.')[0];
};

// Fun√ß√£o para contar linhas do arquivo
const countLines = (filePath: string): number => {
  if (!fileExists(filePath)) return 0;
  const content = fs.readFileSync(filePath, 'utf8');
  return content.split('\n').length;
};

// Fun√ß√£o principal
async function uploadEnv(): Promise<void> {
  log.info('üîê HITSS - Upload de Configura√ß√µes Sens√≠veis');
  log.info('==============================================');

  // Verificar se .env existe
  if (!fileExists(ENV_FILE)) {
    log.error(`‚ùå Arquivo ${ENV_FILE} n√£o encontrado!`);
    process.exit(1);
  }

  // Verificar se git est√° configurado
  try {
    execCommand('git config --global user.email', { stdio: 'pipe' });
  } catch (error) {
    log.warning('‚ö†Ô∏è Configurando Git...');
    
    // No Node.js, usamos readline para input cross-platform
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    const askQuestion = (question: string): Promise<string> => {
      return new Promise((resolve) => {
        rl.question(question, (answer) => {
          resolve(answer);
        });
      });
    };

    try {
      const email = await askQuestion('Digite seu email do GitHub: ');
      const name = await askQuestion('Digite seu nome: ');
      
      execCommand(`git config --global user.email "${email}"`);
      execCommand(`git config --global user.name "${name}"`);
      
      rl.close();
    } catch (configError) {
      rl.close();
      log.error('‚ùå Erro ao configurar Git');
      process.exit(1);
    }
  }

  // Limpar diret√≥rio tempor√°rio
  cleanDir(TEMP_DIR);

  // Clonar reposit√≥rio de configura√ß√µes
  log.info('üì• Clonando reposit√≥rio de configura√ß√µes...');
  try {
    execCommand(`git clone ${REPO_URL} "${TEMP_DIR}"`, { stdio: 'pipe' });
  } catch (error) {
    log.error('‚ùå Erro ao clonar reposit√≥rio. Verifique suas credenciais do GitHub.');
    process.exit(1);
  }

  // Mudar para o diret√≥rio tempor√°rio
  const originalCwd = process.cwd();
  process.chdir(TEMP_DIR);

  try {
    // Criar estrutura de diret√≥rios se n√£o existir
    ensureDir('configs/env');
    ensureDir('configs/docs');
    ensureDir('configs/security');

    // Copiar .env
    log.info('üìÑ Copiando arquivo .env...');
    const envSourcePath = path.join(originalCwd, ENV_FILE);
    const envDestPath = path.join('configs/env', '.env');
    fs.copyFileSync(envSourcePath, envDestPath);

    // Contar linhas do .env
    const envLines = countLines(envSourcePath);

    // Criar relat√≥rio de seguran√ßa
    log.info('üîç Criando relat√≥rio de seguran√ßa...');
    const reportContent = `# Relat√≥rio de Dados Sens√≠veis - HITSS

**Data do Relat√≥rio:** ${getFormattedDate()}
**Projeto:** Aplicativo HITSS
**Sistema:** ${os.platform()} ${os.release()}

## üìä Resumo das Configura√ß√µes
- **Arquivo .env:** ${envLines} vari√°veis configuradas
- **Status:** ‚úÖ Backup realizado com sucesso
- **Plataforma:** ${process.platform}

## üîê Credenciais Identificadas

### Azure MCP
- **Client ID:** PLACEHOLDER_CLIENT_ID
- **Tenant ID:** PLACEHOLDER_TENANT_ID
- **Client Secret:** ‚úÖ Configurado (oculto por seguran√ßa)
- **Object ID:** PLACEHOLDER_OBJECT_ID

### Supabase
- **Projeto ID:** PLACEHOLDER_PROJECT_ID
- **URL:** https://PLACEHOLDER_PROJECT_ID.supabase.co
- **Anon Key:** ‚úÖ Configurado (oculto por seguran√ßa)
- **Access Token:** ‚úÖ Configurado (oculto por seguran√ßa)

## ‚ö†Ô∏è ARQUIVOS COM CREDENCIAIS HARDCODED (NECESSITAM LIMPEZA)

### üî• CR√çTICO - Tokens/Secrets Expostos:
1. **scripts/fix-data-column.ts**
   - Token de acesso: PLACEHOLDER_TOKEN

2. **src/services/migrationService.ts**
   - Token de acesso hardcoded nas linhas 51 e 104
   - Projeto ID hardcoded na linha 15

3. **~/.cursor/mcp.json** (ou %USERPROFILE%\\.cursor\\mcp.json no Windows)
   - Azure Client Secret exposto
   - Azure Client ID exposto
   - Supabase Access Token exposto

### üìù M√âDIO - Documenta√ß√£o com Credenciais:
1. **README.md** - Cont√©m exemplos com credenciais reais
2. **docs/infrastructure/supabase-mcp.md** - Token exposto
3. **docs/guias/instalacao.md** - Credenciais de exemplo
4. **docs/infrastructure/migrations.md** - Refer√™ncias ao projeto
5. **docs/troubleshooting/problemas-comuns.md** - URLs com projeto ID

### üîç BAIXO - Refer√™ncias de Projeto:
1. **src/components/talent-management/SupabaseMCPDemo.tsx** - Projeto ID hardcoded
2. **src/lib/supabaseMCP.ts** - Projeto ID como padr√£o
3. **src/lib/supabaseMCPReal.ts** - Projeto ID hardcoded
4. **src/scripts/testSupabaseMCP.ts** - Projeto ID privado
5. **GUIA_EXECUCAO_FUNCTIONS.md** - URLs diretas
6. **EXECUTE_FUNCTIONS_DIRECT.sql** - URLs diretas

## üõ†Ô∏è A√ß√µes Recomendadas

### Imediatas:
1. **Revogar tokens expostos** no Supabase Dashboard
2. **Gerar novos Client Secrets** no Azure Portal
3. **Limpar arquivos com credenciais hardcoded**
4. **Atualizar vari√°veis de ambiente**

### M√©dio Prazo:
1. Implementar rota√ß√£o autom√°tica de credenciais
2. Adicionar verifica√ß√£o de secrets no CI/CD
3. Configurar alertas de seguran√ßa
4. Documentar processo de gest√£o de credenciais

### Scripts de Limpeza (Cross-Platform):
\`\`\`bash
# Usar scripts TypeScript multiplataforma
npm run security:clean    # Limpa credenciais hardcoded
npm run security:verify   # Verifica seguran√ßa
npm run security:backup   # Backup de configura√ß√µes
\`\`\`

## üìã Checklist de Seguran√ßa
- [ ] Tokens revogados e regenerados
- [ ] Credenciais removidas do c√≥digo
- [ ] Vari√°veis de ambiente atualizadas
- [ ] CI/CD configurado com secrets
- [ ] Documenta√ß√£o atualizada
- [ ] Equipe notificada sobre mudan√ßas

---
**‚ö†Ô∏è IMPORTANTE:** Este relat√≥rio cont√©m informa√ß√µes sens√≠veis. Mantenha-o seguro e compartilhe apenas com pessoal autorizado.
**üñ•Ô∏è COMPATIBILIDADE:** Scripts otimizados para Windows, macOS e Linux.
`;

    fs.writeFileSync('configs/security/sensitive-data-report.md', reportContent);

    // Criar changelog
    log.info('üìã Criando changelog...');
    const changelogContent = `# Changelog - Configura√ß√µes HITSS

## [${new Date().toISOString().split('T')[0]}] - ${getFormattedDate()}

### üîê Seguran√ßa
- Backup de configura√ß√µes sens√≠veis realizado
- Identificados ${envLines} vari√°veis de ambiente
- Relat√≥rio de seguran√ßa gerado
- Scripts multiplataforma implementados

### üìä Credenciais Mapeadas
- Azure MCP: 4 vari√°veis
- Supabase: 4 vari√°veis  
- Total: ${envLines} configura√ß√µes

### üñ•Ô∏è Compatibilidade
- ‚úÖ Windows 10/11
- ‚úÖ macOS (Intel/Apple Silicon)
- ‚úÖ Linux (Ubuntu/Debian/CentOS)
- ‚úÖ Node.js ${process.version}

### ‚ö†Ô∏è A√ß√µes Necess√°rias
- Limpar 15+ arquivos com credenciais hardcoded
- Revogar e regenerar tokens expostos
- Implementar rota√ß√£o de credenciais

### üõ†Ô∏è Arquivos Afetados
- scripts/fix-data-column.ts (CR√çTICO)
- src/services/migrationService.ts (CR√çTICO)
- ~/.cursor/mcp.json (CR√çTICO)
- 12+ arquivos de documenta√ß√£o (M√âDIO)

### üîß Sistema
- **Plataforma:** ${process.platform}
- **Arquitetura:** ${process.arch}
- **Node.js:** ${process.version}
- **Diret√≥rio:** ${originalCwd}

---
*Backup automatizado via upload-env.ts (cross-platform)*
`;

    fs.writeFileSync('configs/docs/CHANGELOG.md', changelogContent);

    // Adicionar arquivos ao git
    log.info('üìù Commitando altera√ß√µes...');
    execCommand('git add .');

    // Commit com informa√ß√µes detalhadas
    const commitMsg = `üîê Backup autom√°tico - ${getFormattedDate()}

üìä Configura√ß√µes: ${envLines} vari√°veis
üîç Seguran√ßa: Relat√≥rio de credenciais gerado
‚ö†Ô∏è Cr√≠tico: 3 arquivos com tokens expostos
üìù M√©dio: 12+ arquivos de documenta√ß√£o
üõ†Ô∏è A√ß√£o: Limpeza de credenciais necess√°ria
üñ•Ô∏è Sistema: ${process.platform} ${process.arch}

Auto-upload via: upload-env.ts (cross-platform)`;

    execCommand(`git commit -m "${commitMsg}"`);

    // Push para o reposit√≥rio
    log.info('‚òÅÔ∏è Enviando para reposit√≥rio seguro...');
    execCommand('git push origin main');

    log.success('‚úÖ Upload conclu√≠do com sucesso!');
    log.warning('‚ö†Ô∏è IMPORTANTE: Credenciais hardcoded identificadas!');
    console.log('');
    log.error('üî• A√á√ÉO IMEDIATA NECESS√ÅRIA:');
    console.log('1. Revogar tokens expostos no Supabase');
    console.log('2. Regenerar Client Secret no Azure');
    console.log('3. Limpar arquivos com credenciais hardcoded');
    console.log('4. Consultar: configs/security/sensitive-data-report.md');
    console.log('');
    log.info('üìä Estat√≠sticas do backup:');
    console.log(`- Vari√°veis de ambiente: ${envLines}`);
    console.log('- Arquivos cr√≠ticos identificados: 3');
    console.log('- Arquivos com limpeza necess√°ria: 15+');
    console.log(`- Reposit√≥rio: ${REPO_URL}`);
    console.log(`- Sistema: ${process.platform} ${process.arch}`);

  } finally {
    // Voltar ao diret√≥rio original
    process.chdir(originalCwd);
    
    // Limpeza
    cleanDir(TEMP_DIR);
  }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  uploadEnv().catch(error => {
    console.error('‚ùå Erro durante o upload:', error);
    process.exit(1);
  });
} 