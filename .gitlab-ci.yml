# ============================================
# GitLab CI/CD Pipeline - Sistema HITSS
# Global HITSS - Gestão Financeira + Talentos
# ============================================

# 🎯 Configuração Global
stages:
  - 🔍 validate
  - 🏗️ build
  - 🧪 test
  - 🚀 deploy
  - 📊 monitor

# 📦 Configuração de Cache
cache:
  paths:
    - node_modules/
    - .pnpm-store/
  key:
    files:
      - pnpm-lock.yaml

# 🔧 Configuração Base
variables:
  NODE_VERSION: "20"
  PNPM_VERSION: "8.15.0"
  DEBIAN_FRONTEND: noninteractive

# 📋 Template Base para Jobs Node.js
.node_template: &node_template
  image: node:${NODE_VERSION}-alpine
  before_script:
    - echo "🔧 Configurando ambiente Node.js..."
    - npm install -g pnpm@${PNPM_VERSION}
    - pnpm config set store-dir .pnpm-store
    - pnpm install --frozen-lockfile
    - echo "✅ Ambiente configurado!"

# ============================================
# STAGE 1: 🔍 VALIDATE - Qualidade de Código
# ============================================

🔍 lint:
  <<: *node_template
  stage: 🔍 validate
  script:
    - echo "🔍 Executando linting..."
    - pnpm lint
    - echo "✅ Linting passou!"
  artifacts:
    reports:
      junit: reports/lint-results.xml
    paths:
      - reports/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

🔍 typescript:
  <<: *node_template
  stage: 🔍 validate
  script:
    - echo "🔍 Verificando TypeScript..."
    - pnpm type-check
    - echo "✅ TypeScript passou!"
  artifacts:
    reports:
      junit: reports/typescript-results.xml
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

🔍 security:
  <<: *node_template
  stage: 🔍 validate
  script:
    - echo "🔒 Verificando segurança..."
    - pnpm audit --audit-level moderate
    - echo "✅ Auditoria de segurança passou!"
  allow_failure: true
  artifacts:
    reports:
      junit: reports/security-results.xml
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# ============================================
# STAGE 2: 🏗️ BUILD - Construção da Aplicação
# ============================================

🏗️ build:
  <<: *node_template
  stage: 🏗️ build
  script:
    - echo "🏗️ Iniciando build da aplicação..."
    - echo "🔧 Configurando variáveis de ambiente..."
    
    # Configurar variáveis do Doppler (se disponível)
    - |
      if command -v doppler >/dev/null 2>&1; then
        echo "📦 Doppler detectado, carregando secrets..."
        doppler run --command="pnpm build" || pnpm build
      else
        echo "⚠️ Doppler não disponível, usando build padrão..."
        pnpm build
      fi
    
    - echo "✅ Build concluído!"
    - echo "📊 Estatísticas do build:"
    - du -sh dist/
    - find dist/ -name "*.js" -o -name "*.css" | wc -l
  artifacts:
    paths:
      - dist/
    expire_in: 1 day
    reports:
      dotenv: build.env
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# ============================================
# STAGE 3: 🧪 TEST - Testes da Aplicação
# ============================================

🧪 unit-tests:
  <<: *node_template
  stage: 🧪 test
  script:
    - echo "🧪 Executando testes unitários..."
    - pnpm test --coverage --reporter=junit --outputFile=reports/unit-tests.xml
    - echo "✅ Testes unitários passaram!"
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      junit: reports/unit-tests.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

🧪 integration-tests:
  <<: *node_template
  stage: 🧪 test
  services:
    - postgres:15-alpine
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: test_pass
    POSTGRES_HOST_AUTH_METHOD: trust
  script:
    - echo "🧪 Executando testes de integração..."
    - echo "🗄️ Configurando banco de testes..."
    - pnpm test:integration --reporter=junit --outputFile=reports/integration-tests.xml
    - echo "✅ Testes de integração passaram!"
  artifacts:
    reports:
      junit: reports/integration-tests.xml
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# ============================================
# STAGE 4: 🚀 DEPLOY - Deploy da Aplicação
# ============================================

🚀 deploy-staging:
  stage: 🚀 deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "🚀 Deploy para ambiente de staging..."
    - echo "📦 Preparando artefatos..."
    - echo "🌍 Deploy simulado (configurar com infraestrutura real)"
    - echo "✅ Deploy de staging concluído!"
  environment:
    name: staging
    url: https://staging.hitss.com
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  dependencies:
    - 🏗️ build

🚀 deploy-production:
  stage: 🚀 deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "🚀 Deploy para produção..."
    - echo "📦 Preparando artefatos de produção..."
    - echo "🔒 Validando segurança..."
    - echo "🌍 Deploy de produção (configurar com infraestrutura real)"
    - echo "✅ Deploy de produção concluído!"
  environment:
    name: production
    url: https://hitss.com
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  dependencies:
    - 🏗️ build
    - 🧪 unit-tests

# ============================================
# STAGE 5: 📊 MONITOR - Monitoramento
# ============================================

📊 health-check:
  stage: 📊 monitor
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "🏥 Executando health check..."
    - echo "🔍 Verificando endpoints..."
    - echo "📊 Coletando métricas..."
    - echo "✅ Health check concluído!"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: delayed
      start_in: 5 minutes
  dependencies: []

📊 performance-test:
  stage: 📊 monitor
  image: sitespeedio/sitespeed.io:latest
  script:
    - echo "⚡ Executando testes de performance..."
    - echo "📊 Simulando análise de performance..."
    - echo "✅ Testes de performance concluídos!"
  artifacts:
    paths:
      - sitespeed-result/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: delayed
      start_in: 10 minutes
  allow_failure: true

# ============================================
# 🔧 JOBS ESPECIAIS
# ============================================

# Job para limpeza de cache (manual)
🧹 clear-cache:
  stage: 🔍 validate
  script:
    - echo "🧹 Limpando cache..."
    - rm -rf node_modules/ .pnpm-store/
    - echo "✅ Cache limpo!"
  rules:
    - when: manual
  cache: {}

# Job para backup (agenda noturna)
💾 backup:
  stage: 📊 monitor
  script:
    - echo "💾 Executando backup..."
    - echo "📦 Criando backup dos artefatos..."
    - echo "✅ Backup concluído!"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  dependencies: []

# ============================================
# 📧 NOTIFICAÇÕES
# ============================================

# Notificação de sucesso/falha via webhook (configurar)
📧 notify:
  stage: 📊 monitor
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "📧 Enviando notificação..."
    - |
      if [ "$CI_JOB_STATUS" = "success" ]; then
        echo "✅ Pipeline executado com sucesso!"
      else
        echo "❌ Pipeline falhou!"
      fi
  rules:
    - when: always
  dependencies: [] 