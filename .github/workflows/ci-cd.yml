name: CI/CD Pipeline - HITSS

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

# Permissões necessárias para GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Permite apenas um deploy simultâneo
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  NODE_VERSION: '18'

jobs:
  validate:
    name: 🔍 Validate Code  
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📊 Detect changes
        id: changes
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Main branch detected - will deploy"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "❌ Non-main branch - skipping deploy"
          fi
          echo "✅ Validation complete - skipping detailed checks for now"

  build:
    name: 🏗️ Build Application
    needs: validate
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_MCP_SERVICE_URL: ${{ secrets.VITE_MCP_SERVICE_URL }}
          VITE_SAP_SERVICE_URL: ${{ secrets.VITE_SAP_SERVICE_URL }}

      - name: 📁 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist
          retention-days: 7

      - name: 📋 Build summary
        run: |
          echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build size**: $(du -sh dist | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Files**: $(find dist -type f | wc -l)" >> $GITHUB_STEP_SUMMARY

  # Setup GitHub Pages
  setup-pages:
    name: 🛠️ Setup GitHub Pages
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: 📄 Setup Pages
        uses: actions/configure-pages@v4

  deploy-production:
    name: 🌟 Deploy to GitHub Pages
    needs: [validate, build, setup-pages]
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📁 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist

      - name: 📄 Setup Pages
        uses: actions/configure-pages@v4

      - name: 📦 Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: 🌟 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🎉 Deployment success notification
        if: success()
        run: |
          echo "## 🎉 GitHub Pages Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

      - name: 🏷️ Create release tag
        if: success()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ github.run_number }}" -m "🚀 Release v${{ github.run_number }} - HITSS"
          git push origin "v${{ github.run_number }}"

  post-deploy-tests:
    name: 🧪 Post-Deploy Tests
    needs: deploy-production
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🧪 Health check
        run: |
          echo "Running health checks on ${{ needs.deploy-production.outputs.page_url }}"
          
          # Aguardar um pouco para o deploy estabilizar
          sleep 30
          
          # Basic connectivity test
          if curl -f -s --max-time 30 "${{ needs.deploy-production.outputs.page_url }}" > /dev/null; then
            echo "✅ Site is accessible"
          else
            echo "❌ Site is not accessible"
            exit 1
          fi

      - name: 📊 Performance audit
        run: |
          npx lighthouse-ci@latest --upload.target=temporary-public-storage \
            --collect.url="${{ needs.deploy-production.outputs.page_url }}" \
            --collect.numberOfRuns=1 \
            --assert.preset=lighthouse:recommended || echo "Lighthouse audit completed with warnings"

      - name: 📋 Post-deploy summary
        run: |
          echo "## 🧪 Post-Deploy Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Audit**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Site URL**: ${{ needs.deploy-production.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment**: ✅ Ready for use" >> $GITHUB_STEP_SUMMARY

  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deploy-tests]
    if: always()
    
    steps:
      - name: 🧹 Clean up artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.startsWith('dist-')) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }
